- name: Install Docker
  shell: |
    curl -f https://download.docker.com/linux/static/stable/{{ arch_x86_64 or arch_aarch64 }}/docker-{{ docker_version }}.tgz | tar xvz -C /usr/local/bin
  register: docker_install_result
  until: docker_install_result is succeeded
  when: required is defined and required | bool
  retries: 3
  delay: 5

- name: Install Helm
  shell: |
    curl -f https://get.helm.sh/helm-v{{ helm_version }}-linux-{{ arch_amd64 or arch_arm64 }}.tar.gz | tar xzv -C /usr/local/bin
  register: helm_install_result
  until: helm_install_result is succeeded
  when: required is defined and required | bool
  retries: 3
  delay: 5

- name: Install Kubectl
  shell: |
    curl -f -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/{{ arch_amd64 or arch_arm64 }}/kubectl &&
    chmod +x kubectl &&
    mv kubectl /usr/local/bin/
  when: required is defined and required | bool
  retries: 3
  delay: 5

- name: Install Argo Rollouts CLI
  shell: |
    curl -LO https://github.com/argoproj/argo-rollouts/releases/download/{{ argo_rollouts_cli_version }}/kubectl-argo-rollouts-linux-{{ arch_amd64 or arch_arm64 }} &&
    chmod +x ./kubectl-argo-rollouts-linux-{{ arch_amd64 or arch_arm64 }} &&
    mv ./kubectl-argo-rollouts-linux-{{ arch_amd64 or arch_arm64 }} /usr/local/bin/kubectl-argo-rollouts
  when: required is defined and required | bool
  retries: 3
  delay: 5

- name: Install yq
  shell: |
    wget https://github.com/mikefarah/yq/releases/download/{{ yq_version }}/yq_linux_{{ arch_amd64 or arch_arm64 }} -O /usr/local/bin/yq &&
    chmod +x /usr/local/bin/yq
  when: required is defined and required | bool
  retries: 3
  delay: 5

- name: Install Kustomize
  shell: |
    curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash &&
    mv kustomize /usr/local/bin/
  when: required is defined and required | bool
  retries: 3
  delay: 5

- name: Install Java 11
  shell: |
    curl -fLo jdk-{{ jdk_11_version }}.tar.gz https://aka.ms/download-jdk/microsoft-jdk-{{ jdk_11_version }}-linux-{{ arch_x64 or arch_aarch64 }}.tar.gz &&
    tar zxf jdk-{{ jdk_11_version }}.tar.gz &&
    mv jdk-{{ jdk_11_version_dir }}+9 /opt/java-{{ jdk_11_version_dir }} &&
    rm jdk-{{ jdk_11_version }}.tar.gz
  when: required is defined and required | bool
  retries: 3
  delay: 5
- name: Install sonar scanner
  shell: |
    curl -Lo /tmp/sonar_scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-{{ sonar_scanner_version }}.zip &&
    unzip /tmp/sonar_scanner.zip -d /opt/ &&
    mv /opt/sonar-scanner-{{ sonar_scanner_version }} /opt/sonar-scanner &&
    sed -i '1 a JAVA_HOME=/opt/java-{{ jdk_11_version_dir }}' /opt/sonar-scanner/bin/sonar-scanner &&
    echo 'export PATH=/opt/sonar-scanner/bin:$PATH' >> /etc/profile.d/sonar-scanner.sh &&
    sonar-scanner --version
  when: required is defined and required | bool
  retries: 3
  delay: 5

- name: Install Go
  shell: |
    wget https://golang.google.cn/dl/go{{ go_version }}.linux-{{ arch_amd64 or arch_arm64 }}.tar.gz
    tar -xvf go{{ go_version }}.linux-{{ arch_amd64 or arch_arm64 }}.tar.gz
    rm -rf go{{ go_version }}.linux-{{ arch_amd64 or arch_arm64 }}.tar.gz
    mv go /usr/local/go
    go version
  when: go_version is defined and go_version != ""
  retries: 3
  delay: 5

- name: Install Node.js
  shell: |
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
    . "$NVM_DIR/nvm.sh"
    nvm install {{ node_version }}
    nvm alias default {{ node_version }}
    nvm use default
  when: node_version is defined and node_version != ""
  retries: 3
  delay: 5
