- name: Install required software
  hosts: localhost
  become: true
  vars:
    docker_version: "27.1.2"
    helm_version: "3.15.4"
    argocd_cli_version: "v2.12.1"
    argo_rollouts_cli_version: "v1.7.2"
    yq_version: "v4.44.3"
    jdk_11_version: "11.0.14.9.1"
    sonar_scanner_version: "4.8.0.2856"
    maven_version: "3.9.9"
  tasks:
    - name: Detect system architecture
      command: uname -m
      register: arch_output
      changed_when: false

    - name: Set architecture variables
      set_fact:
        arch_x86_64: "{{ 'x86_64' if arch_output.stdout == 'x86_64' else '' }}"
        arch_x64: "{{ 'x64' if arch_output.stdout == 'x86_64' else '' }}"
        arch_amd64: "{{ 'amd64' if arch_output.stdout == 'x86_64' else '' }}"
        arch_aarch64: "{{ 'aarch64' if arch_output.stdout == 'aarch64' else '' }}"
        arch_arm64: "{{ 'arm64' if arch_output.stdout == 'aarch64' else '' }}"
        jdk_11_version_dir: "{{ jdk_11_version.split('.')[0:3] | join('.') }}"

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - make
          - build-essential
          - libcurl4-openssl-dev
          - libssl-dev
          - wget
          - git
          - curl
          - autoconf
          - zip
          - unzip
          - jq
          - locales
          - vim
          - gettext
        state: present
      register: apt_install_result

    - name: Install Docker
      shell: |
        curl -f https://download.docker.com/linux/static/stable/{{ arch_x86_64 or arch_aarch64 }}/docker-{{ docker_version }}.tgz | tar xvz -C /usr/local/bin
      register: docker_install_result
      until: docker_install_result is succeeded
      when: required is defined and required | bool
      retries: 3
      delay: 5

    - name: Install Helm
      shell: |
        curl -f https://get.helm.sh/helm-v{{ helm_version }}-linux-{{ arch_amd64 or arch_arm64 }}.tar.gz | tar xzv -C /usr/local/bin
      register: helm_install_result
      until: helm_install_result is succeeded
      when: required is defined and required | bool
      retries: 3
      delay: 5

    - name: Install Kubectl
      shell: |
        curl -f -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/{{ arch_amd64 or arch_arm64 }}/kubectl &&
        chmod +x kubectl &&
        mv kubectl /usr/local/bin/
      when: required is defined and required | bool
      retries: 3
      delay: 5

    - name: Install Argo Rollouts CLI
      shell: |
        curl -LO https://github.com/argoproj/argo-rollouts/releases/download/{{ argo_rollouts_cli_version }}/kubectl-argo-rollouts-linux-{{ arch_amd64 or arch_arm64 }} &&
        chmod +x ./kubectl-argo-rollouts-linux-{{ arch_amd64 or arch_arm64 }} &&
        mv ./kubectl-argo-rollouts-linux-{{ arch_amd64 or arch_arm64 }} /usr/local/bin/kubectl-argo-rollouts
      when: required is defined and required | bool
      retries: 3
      delay: 5

    - name: Install yq
      shell: |
        wget https://github.com/mikefarah/yq/releases/download/{{ yq_version }}/yq_linux_{{ arch_amd64 or arch_arm64 }} -O /usr/local/bin/yq &&
        chmod +x /usr/local/bin/yq
      when: required is defined and required | bool
      retries: 3
      delay: 5

    - name: Install Kustomize
      shell: |
        curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash &&
        mv kustomize /usr/local/bin/
      when: required is defined and required | bool
      retries: 3
      delay: 5

    - name: Install Java 11
      shell: |
        curl -fLo jdk-{{ jdk_11_version }}.tar.gz https://aka.ms/download-jdk/microsoft-jdk-{{ jdk_11_version }}-linux-{{ arch_x64 or arch_aarch64 }}.tar.gz &&
        tar zxf jdk-{{ jdk_11_version }}.tar.gz &&
        mv jdk-{{ jdk_11_version_dir }}+9 /opt/java-{{ jdk_11_version_dir }} &&
        rm jdk-{{ jdk_11_version }}.tar.gz
      when: required is defined and required | bool
      retries: 3
      delay: 5
    - name: Install sonar scanner
      shell: |
        curl -Lo /tmp/sonar_scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-{{ sonar_scanner_version }}.zip &&
        unzip /tmp/sonar_scanner.zip -d /opt/ &&
        mv /opt/sonar-scanner-{{ sonar_scanner_version }} /opt/sonar-scanner &&
        sed -i '1 a JAVA_HOME=/opt/java-{{ jdk_11_version_dir }}' /opt/sonar-scanner/bin/sonar-scanner &&
        echo 'export PATH=/opt/sonar-scanner/bin:$PATH' >> /etc/profile.d/sonar-scanner.sh &&
        sonar-scanner --version
      when: required is defined and required | bool
      retries: 3
      delay: 5

    - name: Install Podman using apt if requested
      apt:
        name: podman
        state: present
      when: install_podman is defined and install_podman | bool
    - name: Remove docker if it exists
      file:
        path: /usr/bin/docker
        state: absent
      when: install_podman is defined and install_podman | bool
      retries: 3
      delay: 5
    - name: Create symbolic link from podman to docker
      file:
        src: /usr/bin/podman
        dest: /usr/bin/docker
        state: link
      when: install_podman is defined and install_podman | bool

    - name: Install Go
      shell: |
        wget https://golang.google.cn/dl/go{{ go_version }}.linux-{{ arch_amd64 or arch_arm64 }}.tar.gz
        tar -xvf go{{ go_version }}.linux-{{ arch_amd64 or arch_arm64 }}.tar.gz
        rm -rf go{{ go_version }}.linux-{{ arch_amd64 or arch_arm64 }}.tar.gz
        mv go /usr/local/go
        go version
      when: go_version is defined and go_version != ""
      retries: 3
      delay: 5

    - name: Install Java
      apt:
        name: openjdk-{{ java_version }}-jdk
        state: present
      when: java_version is defined and java_version != ""
      retries: 3
      delay: 5
    - name: Install Maven
      shell: |
        cd /opt && wget https://archive.apache.org/dist/maven/maven-3/{{ maven_version }}/binaries/apache-maven-{{ maven_version }}-bin.tar.gz &&  \
        tar -xvf apache-maven-{{ maven_version }}-bin.tar.gz &&  \
        rm -rf apache-maven-{{ maven_version }}-bin.tar.gz && \
        rm -rf /opt/java-{{ jdk_11_version_dir }} /opt/sonar-scanner-{{ sonar_scanner_version }}
      when: java_version is defined and java_version != ""
      retries: 3
      delay: 5

    - name: Install Node.js
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
        . "$NVM_DIR/nvm.sh"
        nvm install {{ node_version }}
        nvm alias default {{ node_version }}
        nvm use default
      when: node_version is defined and node_version != ""
      retries: 3
      delay: 5

    - name: Install Python Requirements
      apt:
        name: zlib1g-dev
        state: present
      when: python_version is defined and python_version != ""
      retries: 3
      delay: 5
    - name: Install Python
      shell: |
        wget https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tgz && \
        tar xvf Python-{{ python_version }}.tgz && \
        cd Python-{{ python_version }}  && \
        ./configure --enable-optimizations  && \
        make -j 8 && \
        make install && \
        rm -rf /usr/local/bin/python && \
        mv /usr/local/bin/${PYTHON_VERSION} /usr/local/bin/python
        cd .. && \
        rm -rf Python-{{ python_version }} && \
        rm Python-{{ python_version }}.tgz && \
        python --version
      when: python_version is defined and python_version != ""
      retries: 3
      delay: 5
    - name: Install Python PIP
      apt:
        name: python3-pip
        state: present
      when: python_version is defined and python_version != ""
      retries: 3
      delay: 5

    # add more software installation before the clean cache task

    - name: Clean cache
      shell: |
          apt-get clean
          rm -rf /var/lib/apt/lists/*
