name: Check Relok8s Images
on:
  workflow_call:

jobs:
  validate-relok8s-images:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        chart: [jenkins, jenkins-full]
    env:
      CHARTS_SYNCER_VERSION: 0.0.23
      SOURCE_CONTAINER_REGISTRY: http://localhost:8080
      TARGET_CONTAINER_REGISTRY: http://localhost:8081
      TEST_CONTAINER_REGISTRY: k8s.container.registry.io
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Init variable
        id: init-variable
        run: |
          VERSION=$(git describe --tags --abbrev=8)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${VERSION}" >> $GITHUB_OUTPUT
          echo "CHART_SMEVER=${VERSION#"v"}" >> $GITHUB_OUTPUT
          echo "CHART_DIR=charts/${{ matrix.chart }}" >> $GITHUB_OUTPUT
      - name: Set up ChartMuseum
        run: |
          docker run -d -p 8080:8080 --name source-chartmuseum --tmpfs /charts chartmuseum/chartmuseum:latest --storage="local" --storage-local-rootdir="/charts"
          sleep 5
          docker run -d -p 8081:8080 --name target-chartmuseum --tmpfs /charts chartmuseum/chartmuseum:latest --storage="local" --storage-local-rootdir="/charts"
          sleep 5
      - name: Install chart-syncer
        run: |
          helm plugin install https://github.com/chartmuseum/helm-push.git
          wget --tries=5 --retry-connrefused --wait=5 -q "https://files.m.daocloud.io/github.com/DaoCloud/charts-syncer/releases/download/v${{ env.CHARTS_SYNCER_VERSION }}/charts-syncer_${{ env.CHARTS_SYNCER_VERSION }}_linux_x86_64.tar.gz"
          tar -zvxf charts-syncer_${{ env.CHARTS_SYNCER_VERSION }}_linux_x86_64.tar.gz
          chmod +x charts-syncer &&  mv charts-syncer /usr/local/bin/
      - name: Update chart tag
        run: |
          image_tag=${{ steps.init-variable.outputs.IMAGE_TAG }}
          sed -i "s/latest/${image_tag}/g" ${{ steps.init-variable.outputs.CHART_DIR }}/values.yaml 
          chart_smever=${{ steps.init-variable.outputs.CHART_SMEVER }}
          sed -i "s/0.1.0/${chart_smever}/g" ${{ steps.init-variable.outputs.CHART_DIR }}/Chart.yaml
      - name: Create helm chart package
        run: |
          helm package ${{ steps.init-variable.outputs.CHART_DIR }} --destination ./amamba-charts/docs/
          ls -l ./amamba-charts/docs/
      - name: Push Helm Chart to Source ChartMuseum
        run: |
          helm repo add source-chartmuseum ${{ env.SOURCE_CONTAINER_REGISTRY }}
          helm cm-push ./amamba-charts/docs/${{ matrix.chart }}-${{ steps.init-variable.outputs.CHART_SMEVER }}.tgz source-chartmuseum
      - name: Sync charts using Chart-Syncer
        run: |
          cat <<EOF > syncer-config.yaml
          source:
            repo:
              kind: "CHARTMUSEUM"
              url: ${{ env.SOURCE_CONTAINER_REGISTRY }}
          target:
            repoName: myrepo
            containerRegistry: ${{ env.TEST_CONTAINER_REGISTRY }}
            containerRepository: repository/demo/k8s
            repo:
              kind: "CHARTMUSEUM"
              url: ${{ env.TARGET_CONTAINER_REGISTRY }}
          charts:
            - name: ${{ matrix.chart }}
              versions:
                - ${{ steps.init-variable.outputs.CHART_SMEVER }}
          EOF

          cat syncer-config.yaml
          charts-syncer sync --config syncer-config.yaml -v 5 --insecure
      - name: Verify Synced Charts in Target ChartMuseum
        run: |
          helm repo add target-chartmuseum ${{ env.TARGET_CONTAINER_REGISTRY }}
          helm repo update
          chart_smever=${{ steps.init-variable.outputs.CHART_SMEVER }}
          helm search repo target-chartmuseum/${{ matrix.chart }} --version $chart_smever || exit 1
          IMAGE_LIST=`helm template test target-chartmuseum/${{ matrix.chart }} --version $chart_smever --set trace.enabled=true --set eventProxy.enabled=true | grep "image: " | awk -F'[: "]+' '{print $3":"$4}' | sort | uniq`
          if [ -z "${IMAGE_LIST}" ] ; then 
              echo "error, failed to find image from chart template for ${{ matrix.chart }}" 
              exit 1 
          else 
            echo "found image from ${{ matrix.chart }} chart template: ${IMAGE_LIST} "
            for IMAGE in ${IMAGE_LIST} ; do
              echo image: ${IMAGE}
              if [[ ${IMAGE} != ${{ env.TEST_CONTAINER_REGISTRY }}* ]] ; then 
                  echo "error, failed to check image ${IMAGE} from chart template for ${{ matrix.chart }}, because the image registry has not been replaced"
                  exit 1
              fi
            done

            for IMAGE in ${IMAGE_LIST} ; do 
              echo image: ${IMAGE}
              LEN=`echo ${IMAGE} | awk -F '/' '{print NF}'` 
              if [[ ${LEN} -lt 3 ]] ; then 
                  echo "error, failed to check image ${IMAGE} from chart template for ${{ matrix.chart }}, because the image does not have repository" 
                  exit 1 
              fi
            done 
          fi