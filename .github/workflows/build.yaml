name: Build Images
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+
  workflow_dispatch:
jobs:
  init-variable:
    runs-on: ubuntu-24.04
    outputs:
      container_tag: ${{ steps.init_variable.outputs.container_tag }}
      platforms: ${{ steps.init_variable.outputs.platforms }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: output environment variable
        id: init_variable
        run: |
          set -x
          if [[ $GITHUB_REF =~ ^refs/tags/v ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            PLATFORMS="linux/amd64,linux/arm64"
          else
            VERSION=$(git describe --tags --abbrev=8)
            PLATFORMS="linux/amd64"
          fi
          echo "container_tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "platforms=${PLATFORMS}" >> $GITHUB_OUTPUT
  check-generate-versions:
    runs-on: ubuntu-24.04
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: check generate versions diff
        id: check-versions-diff
        run: |
          make update-agents-version
          if ! git diff HEAD --exit-code > /dev/null; then
            echo "Error: Detected changes after running 'make update-agents-version'."
            echo "The following changes were detected:"
            git diff HEAD
            echo "Please run 'make update-agents-version' and commit the changes."
            exit 1
          fi
  manifest-conformance:
    needs: [check-generate-versions]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Helm
        uses: azure/setup-helm@v3
      - name: Validate Helm Policy
        run: "OUTPUT=github make conftest \n"
  build-jenkins:
    permissions:
      contents: read
      packages: write
    needs: [init-variable, manifest-conformance]
    runs-on: ubuntu-24.04
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: use-setup-buildx-action
        uses: docker/setup-buildx-action@v3.9.0
      - name: login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: build jenkins
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ needs.init-variable.outputs.platforms }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/jenkins:${{ needs.init-variable.outputs.container_tag }}-2.413
            ${{ secrets.DOCKER_USERNAME }}/jenkins:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-jenkins-agent-base:
    permissions:
      contents: read
      packages: write
    needs: [init-variable, manifest-conformance]
    strategy:
      fail-fast: true
      matrix:
        os: ["centos", "ubuntu"]
    runs-on: ubuntu-24.04
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: init variables
        id: step-variable
        run: |
          export "distribution=$([ ${{ matrix.os }} == ubuntu ] && (echo -ubuntu))"
          echo "distribution=${distribution}" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v3.9.0
      - name: build jenkins agent with docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/base/Dockerfile.${{ matrix.os }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ needs.init-variable.outputs.platforms }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-base:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.distribution }}
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-base:latest${{ steps.step-variable.outputs.distribution }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check tools with docker
        run: |
          AGENT_IMAGE="${{ secrets.DOCKER_USERNAME }}/jenkins-agent-base:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.distribution }}"
          echo "Agent Image: ${AGENT_IMAGE}"
          docker run -v /var/run/docker.sock:/var/run/docker.sock \
            -v ./test/e2e/check_agent_base_tools.sh:/tmp/check_agent_base_tools.sh \
            -v ./test/fixture/image-check/base-agent:/tmp/base-agent/ \
            -e AGENT_IMAGE=$AGENT_IMAGE \
            -i $AGENT_IMAGE /bin/bash \
            -c "./tmp/check_agent_base_tools.sh"
      - name: build jenkins agent with podman
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/base/podman/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ needs.init-variable.outputs.platforms }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-base:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.distribution }}-podman
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-base:latest${{ steps.step-variable.outputs.distribution }}-podman
          build-args: |
            REGISTRY_REPO=${{ secrets.DOCKER_USERNAME }}
            DISTRIBUTION=${{ matrix.os }}
            DISTRIBUTION_SUFFIX=${{ steps.step-variable.outputs.distribution }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check tools with podman
        run: |
          AGENT_IMAGE="${{ secrets.DOCKER_USERNAME }}/jenkins-agent-base:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.distribution }}-podman"
          echo "Agent Image: ${AGENT_IMAGE}"
          docker run --privileged -v ./test/e2e/check_agent_base_tools.sh:/tmp/check_agent_base_tools.sh \
            -v ./test/fixture/image-check/base-agent:/tmp/base-agent/ \
            -e AGENT_IMAGE=$AGENT_IMAGE \
            -i $AGENT_IMAGE /bin/bash \
            -c "./tmp/check_agent_base_tools.sh"
  build-deprected-agent-centos:
    needs: [build-jenkins-agent-base, init-variable]
    uses: ./.github/workflows/build_centos.yaml
    secrets: inherit
    with:
      container_tag: ${{ needs.init-variable.outputs.container_tag }}
      platforms: ${{ needs.init-variable.outputs.platforms }}
  build-agent-nodejs:
    needs: [build-jenkins-agent-base, init-variable]
    strategy:
      fail-fast: true
      matrix:
        runtime: [docker, podman]
        version: [16.20.2, 18.20.4, 20.17.0]
    runs-on: ubuntu-24.04
    env:
      os: ubuntu
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: init variables
        id: step-variable
        run: |
          export "runtime=$([ ${{ matrix.runtime }} == podman ] && (echo -podman))"
          echo "runtime=${runtime}" >> $GITHUB_OUTPUT
          export "nodejsVersion=$( echo -${{ matrix.version }})"
          echo "suffix=${nodejsVersion}-${os}${runtime}" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v3.9.0
      - name: build jenkins agent with nodejs
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/nodejs/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ needs.init-variable.outputs.platforms }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-nodejs:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.suffix }}
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-nodejs:latest${{ steps.step-variable.outputs.suffix }}
          build-args: |
            REGISTRY_REPO=${{ secrets.DOCKER_USERNAME }}
            RUNTIME=${{ steps.step-variable.outputs.runtime }}
            VERSION=${{ matrix.version }}
            DISTRIBUTION=${{ env.os }}
            DISTRIBUTION_SUFFIX=-${{ env.os }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check nodejs agent tools
        run: |
          SOFTWARE_MATRIX=nodejs-${{ matrix.version }}
          AGENT_IMAGE=${{ secrets.DOCKER_USERNAME }}/jenkins-agent-nodejs:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.suffix }}
          echo "Software Matrix Version: ${SOFTWARE_MATRIX}, Agent Image: ${AGENT_IMAGE}"
          docker run -v ./test/e2e/check_agent_software_tools.sh:/tmp/check_agent_software_tools.sh \
            -v ./test/fixture/image-check/nodejs-agent:/tmp/nodejs-agent/ \
            -e AGENT_IMAGE=$AGENT_IMAGE \
            -e SOFTWARE_MATRIX=${SOFTWARE_MATRIX} \
            -i $AGENT_IMAGE /bin/bash \
            -c "./tmp/check_agent_software_tools.sh"
  build-agent-python:
    needs: [build-jenkins-agent-base, init-variable]
    strategy:
      fail-fast: true
      matrix:
        runtime: [docker, podman]
        version: [3.8.19, 2.7.9, 3.10.9, 3.11.9]
    runs-on: ubuntu-24.04
    env:
      os: ubuntu
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: init variables
        id: step-variable
        run: |
          export "runtime=$([ ${{ matrix.runtime }} == podman ] && (echo -podman))"
          echo "runtime=${runtime}" >> $GITHUB_OUTPUT
          export "pythonVersion=$( echo -${{ matrix.version }})"
          echo "suffix=${pythonVersion}-${os}${runtime}" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v3.9.0
      - name: build jenkins agent with python
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/python/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ needs.init-variable.outputs.platforms }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-python:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.suffix }}
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-python:latest${{ steps.step-variable.outputs.suffix }}
          build-args: |
            REGISTRY_REPO=${{ secrets.DOCKER_USERNAME }}
            RUNTIME=${{ steps.step-variable.outputs.runtime }}
            VERSION=${{ matrix.version }}
            DISTRIBUTION=${{ env.os }}
            DISTRIBUTION_SUFFIX=-${{ env.os }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check python agent tools
        run: |
          SOFTWARE_MATRIX=python-${{ matrix.version }}
          AGENT_IMAGE=${{ secrets.DOCKER_USERNAME }}/jenkins-agent-python:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.suffix }}
          echo "Software Matrix Version: ${SOFTWARE_MATRIX}, Agent Image: ${AGENT_IMAGE}"
          docker run -v ./test/e2e/check_agent_software_tools.sh:/tmp/check_agent_software_tools.sh \
            -v ./test/fixture/image-check/python-agent:/tmp/python-agent/ \
            -e AGENT_IMAGE=$AGENT_IMAGE \
            -e SOFTWARE_MATRIX=${SOFTWARE_MATRIX} \
            -i $AGENT_IMAGE /bin/bash \
            -c "./tmp/check_agent_software_tools.sh"
  build-agent-golang:
    needs: [build-jenkins-agent-base, init-variable]
    strategy:
      fail-fast: true
      matrix:
        runtime: [docker, podman]
        version: [1.22.6, 1.17.13, 1.18.10, 1.20.14]
    runs-on: ubuntu-24.04
    env:
      os: ubuntu
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: init variables
        id: step-variable
        run: |
          export "runtime=$([ ${{ matrix.runtime }} == podman ] && (echo -podman))"
          echo "runtime=${runtime}" >> $GITHUB_OUTPUT
          export "goVersion=$( echo -${{ matrix.version }})"
          echo "suffix=${goVersion}-${os}${runtime}" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v3.9.0
      - name: build jenkins agent with go
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/go/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ needs.init-variable.outputs.platforms }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-go:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.suffix }}
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-go:latest${{ steps.step-variable.outputs.suffix }}
          build-args: |
            REGISTRY_REPO=${{ secrets.DOCKER_USERNAME }}
            RUNTIME=${{ steps.step-variable.outputs.runtime }}
            VERSION=${{ matrix.version }}
            DISTRIBUTION=${{ env.os }}
            DISTRIBUTION_SUFFIX=-${{ env.os }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check go agent tools
        run: |
          SOFTWARE_MATRIX=go-${{ matrix.version }}
          AGENT_IMAGE=${{ secrets.DOCKER_USERNAME }}/jenkins-agent-go:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.suffix }}
          echo "Software Matrix Version: ${SOFTWARE_MATRIX}, Agent Image: ${AGENT_IMAGE}"
          docker run -v ./test/e2e/check_agent_software_tools.sh:/tmp/check_agent_software_tools.sh \
            -v ./test/fixture/image-check/go-agent:/tmp/go-agent/ \
            -e AGENT_IMAGE=$AGENT_IMAGE \
            -e SOFTWARE_MATRIX=${SOFTWARE_MATRIX} \
            -i $AGENT_IMAGE /bin/bash \
            -c "./tmp/check_agent_software_tools.sh"
  build-agent-maven:
    needs: [build-jenkins-agent-base, init-variable]
    strategy:
      fail-fast: true
      matrix:
        runtime: [docker, podman]
        version: ["8", "11", "17", "21"]
    runs-on: ubuntu-24.04
    env:
      os: ubuntu
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: init variables
        id: step-variable
        run: |
          export "runtime=$([ ${{ matrix.runtime }} == podman ] && (echo -podman))"
          export "jdkVersion=$(echo -jdk${{ matrix.version }})"
          export "javaVersion=${{ matrix.version }}"
          echo "javaVersion=${javaVersion}" >> $GITHUB_OUTPUT
          echo "jdkVersion=${jdkVersion}" >> $GITHUB_OUTPUT
          echo "runtime=${runtime}" >> $GITHUB_OUTPUT
          echo "suffix=${jdkVersion}-${os}${runtime}" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v3.9.0
      - name: build jenkins agent with maven
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/maven/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ needs.init-variable.outputs.platforms }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-maven:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.suffix }}
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-maven:latest${{ steps.step-variable.outputs.suffix }}
          build-args: |
            REGISTRY_REPO=${{ secrets.DOCKER_USERNAME }}
            RUNTIME=${{ steps.step-variable.outputs.runtime }}
            JAVA_VERSION=${{ steps.step-variable.outputs.javaVersion }}
            DISTRIBUTION=${{ env.os }}
            DISTRIBUTION_SUFFIX=-${{ env.os }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check maven agent tools
        run: |
          SOFTWARE_MATRIX=java-${{ matrix.version }}
          AGENT_IMAGE=${{ secrets.DOCKER_USERNAME }}/jenkins-agent-maven:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.suffix }}
          echo "Software Matrix Version: ${SOFTWARE_MATRIX}, Agent Image: ${AGENT_IMAGE}"
          docker run -v ./test/e2e/check_agent_software_tools.sh:/tmp/check_agent_software_tools.sh \
            -v ./test/fixture/image-check/maven-agent:/tmp/maven-agent/ \
            -e AGENT_IMAGE=$AGENT_IMAGE \
            -e SOFTWARE_MATRIX=${SOFTWARE_MATRIX} \
            -i $AGENT_IMAGE /bin/bash \
            -c "./tmp/check_agent_software_tools.sh"
  validate-relok8s-images:
    needs: [build-jenkins, build-agent-maven, build-agent-golang, build-agent-python, build-agent-nodejs]
    uses: ./.github/workflows/check_relok8s.yaml
    secrets: inherit
  e2e:
    runs-on: ubuntu-24.04
    if: github.ref_type != 'tag'
    needs: [init-variable, build-jenkins]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1
      - name: Create kind cluster
        uses: helm/kind-action@v1.7.0
      - name: Deploy Chart
        run: |
          ./hack/install/envsubst.sh
          VERSION=${{ needs.init-variable.outputs.container_tag }} make deploy
  publish-charts:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-jenkins, build-agent-maven, build-agent-golang, build-agent-python, build-agent-nodejs]
    strategy:
      fail-fast: true
      matrix:
        chart_dir: [charts/jenkins, charts/jenkins-full]
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Helm
        uses: azure/setup-helm@v3
      - name: Get the version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
      - name: Tag helm chart image
        run: |
          image_tag=${{ steps.get_version.outputs.VERSION }}
          chart_version=${{ steps.get_version.outputs.VERSION }}
          sed -i "s/latest/${image_tag}/g" ${{ matrix.chart_dir }}/values.yaml
          sed -i "s/latest/${image_tag}/g" ${{ matrix.chart_dir }}/.relok8s-images.yaml
          chart_smever=${chart_version#"v"}
          sed -i "s/0.1.0/${chart_smever}/g" ${{ matrix.chart_dir }}/Chart.yaml
      - uses: getsentry/action-github-app-token@v2
        id: get_app_token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Sync Chart Repo
        run: |-
          git config --global user.email "amamba[bot]@users.noreply.github.com"
          git config --global user.name "amamba[bot]"
          git clone https://x-access-token:${{ steps.get_app_token.outputs.token }}@github.com/amamba-io/charts.git amamba-charts
          helm package ${{ matrix.chart_dir }} --destination ./amamba-charts/docs/
          helm repo index --url https://amamba-io.github.io/charts ./amamba-charts/docs/
          cd amamba-charts/
          git add docs/
          chart_version=${{ steps.get_version.outputs.VERSION }}
          git commit -m "update jenkins chart ${chart_version}"
          git push https://x-access-token:${{ steps.get_app_token.outputs.token }}@github.com/amamba-io/charts.git
