name: Build ARM Images
on:
  workflow_call:
    inputs:
      container_tag:
        description: 'Container Tag'
        required: true
        type: string
      build_agent_base:
        description: 'Build Agent Base'
        required: false
        type: boolean
        default: false
      build_agent_nodejs:
        description: 'Build Agent Nodejs'
        required: false
        type: boolean
        default: false
      build_agent_python:
        description: 'Build Agent Python'
        required: false
        type: boolean
        default: false
      build_agent_golang:
        description: 'Build Agent Golang'
        required: false
        type: boolean
        default: false
      build_agent_maven:
        description: 'Build Agent Maven'
        required: false
        type: boolean
        default: false
      platform:
        description: 'Platform'
        required: false
        type: string
        default: 'linux/arm64'
      arch:
        description: 'Architecture'
        required: false
        type: string
        default: 'arm64'
      runs_on:
        description: 'Runs On'
        required: false
        type: string
        default: 'ubuntu-24.04-arm'
jobs:
  build-jenkins-agent-base:
    if: ${{ inputs.build_agent_base }}
    permissions:
      contents: read
      packages: write
    runs-on: ${{ inputs.runs_on }}
    strategy:
      fail-fast: true
      matrix:
        os: ["centos", "ubuntu"]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: init variables
        id: step-variable
        run: |
          export "distribution=$([ ${{ matrix.os }} == ubuntu ] && (echo -ubuntu))"
          echo "distribution=${distribution}" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build jenkins agent with docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/base/Dockerfile.${{ matrix.os }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ inputs.platform }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-base:${{ inputs.container_tag }}${{ steps.step-variable.outputs.distribution }}-${{ inputs.arch }}
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-base:latest${{ steps.step-variable.outputs.distribution }}-${{ inputs.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check tools with docker
        run: |
          AGENT_IMAGE="ghcr.io/${{ github.repository_owner }}/jenkins-agent-base:${{ inputs.container_tag }}${{ steps.step-variable.outputs.distribution }}-${{ inputs.arch }}"
          echo "Agent Image: ${AGENT_IMAGE}"
          docker run -v /var/run/docker.sock:/var/run/docker.sock \
            -v ./test/e2e/check_agent_base_tools.sh:/tmp/check_agent_base_tools.sh \
            -v ./test/fixture/image-check/base-agent:/tmp/base-agent/ \
            -e AGENT_IMAGE=$AGENT_IMAGE \
            -i $AGENT_IMAGE /bin/bash \
            -c "./tmp/check_agent_base_tools.sh"
      - name: build jenkins agent with podman
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/base/podman/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ inputs.platform }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-base:${{ inputs.container_tag }}${{ steps.step-variable.outputs.distribution }}-podman-${{ inputs.arch }}
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-base:latest${{ steps.step-variable.outputs.distribution }}-podman-${{ inputs.arch }}
          build-args: |
            REGISTRY_REPO=ghcr.io/${{ github.repository_owner }}
            DISTRIBUTION=${{ matrix.os }}
            DISTRIBUTION_SUFFIX=${{ steps.step-variable.outputs.distribution }}
            ARCH_SUFFIX=-${{ inputs.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check tools with podman
        run: |
          AGENT_IMAGE="ghcr.io/${{ github.repository_owner }}/jenkins-agent-base:${{ inputs.container_tag }}${{ steps.step-variable.outputs.distribution }}-podman-${{ inputs.arch }}"
          echo "Agent Image: ${AGENT_IMAGE}"
          docker run --privileged -v ./test/e2e/check_agent_base_tools.sh:/tmp/check_agent_base_tools.sh \
          -v ./test/fixture/image-check/base-agent:/tmp/base-agent/ \
          -e AGENT_IMAGE=$AGENT_IMAGE \
          -i $AGENT_IMAGE /bin/bash \
          -c "./tmp/check_agent_base_tools.sh"
  build-agent-nodejs:
    if: ${{ inputs.build_agent_nodejs }}
    runs-on: ${{ inputs.runs_on }}
    strategy:
      fail-fast: true
      matrix:
        runtime: [docker, podman]
        version: [16.20.2, 18.20.4, 20.17.0]
    env:
      os: ubuntu
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: init variables
        id: step-variable
        run: |
          export "runtime=$([ ${{ matrix.runtime }} == podman ] && (echo -podman))"
          echo "runtime=${runtime}" >> $GITHUB_OUTPUT
          export "nodejsVersion=$( echo -${{ matrix.version }})"
          echo "suffix=${nodejsVersion}-${{ env.os }}${runtime}" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build jenkins agent with nodejs
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/nodejs/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ inputs.platform }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-nodejs:${{ inputs.container_tag }}${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-nodejs:latest${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
          build-args: |
            REGISTRY_REPO=ghcr.io/${{ github.repository_owner }}
            RUNTIME=${{ steps.step-variable.outputs.runtime }}
            VERSION=${{ matrix.version }}
            DISTRIBUTION=${{ env.os }}
            DISTRIBUTION_SUFFIX=-${{ env.os }}
            ARCH_SUFFIX=-${{ inputs.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check nodejs agent tools
        run: |
          SOFTWARE_MATRIX=nodejs-${{ matrix.version }}
          AGENT_IMAGE=ghcr.io/${{ github.repository_owner }}/jenkins-agent-nodejs:${{ inputs.container_tag }}${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
          echo "Software Matrix Version: ${SOFTWARE_MATRIX}, Agent Image: ${AGENT_IMAGE}"
          docker run -v ./test/e2e/check_agent_software_tools.sh:/tmp/check_agent_software_tools.sh \
            -v ./test/fixture/image-check/nodejs-agent:/tmp/nodejs-agent/ \
            -e AGENT_IMAGE=$AGENT_IMAGE \
            -e SOFTWARE_MATRIX=${SOFTWARE_MATRIX} \
            -i $AGENT_IMAGE /bin/bash \
            -c "./tmp/check_agent_software_tools.sh"
  build-agent-python:
    if: ${{ inputs.build_agent_python }}
    strategy:
      fail-fast: true
      matrix:
        runtime: [docker, podman]
        version: [3.8.19, 2.7.9, 3.10.9, 3.11.9]
    runs-on: ${{ inputs.runs_on }}
    env:
      os: ubuntu
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: init variables
        id: step-variable
        run: |
          export "runtime=$([ ${{ matrix.runtime }} == podman ] && (echo -podman))"
          echo "runtime=${runtime}" >> $GITHUB_OUTPUT
          export "pythonVersion=$( echo -${{ matrix.version }})"
          echo "suffix=${pythonVersion}-${{ env.os }}${runtime}" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build jenkins agent with python
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/python/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ inputs.platform }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-python:${{ inputs.container_tag }}${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-python:latest${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
          build-args: |
            REGISTRY_REPO=ghcr.io/${{ github.repository_owner }}
            RUNTIME=${{ steps.step-variable.outputs.runtime }}
            VERSION=${{ matrix.version }}
            DISTRIBUTION=${{ env.os }}
            DISTRIBUTION_SUFFIX=-${{ env.os }}
            ARCH_SUFFIX=-${{ inputs.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check python agent tools
        run: |
          SOFTWARE_MATRIX=python-${{ matrix.version }}
          AGENT_IMAGE=ghcr.io/${{ github.repository_owner }}/jenkins-agent-python:${{ inputs.container_tag }}${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
          echo "Software Matrix Version: ${SOFTWARE_MATRIX}, Agent Image: ${AGENT_IMAGE}"
          docker run -v ./test/e2e/check_agent_software_tools.sh:/tmp/check_agent_software_tools.sh \
            -v ./test/fixture/image-check/python-agent:/tmp/python-agent/ \
            -e AGENT_IMAGE=$AGENT_IMAGE \
            -e SOFTWARE_MATRIX=${SOFTWARE_MATRIX} \
            -i $AGENT_IMAGE /bin/bash \
            -c "./tmp/check_agent_software_tools.sh"
  build-agent-golang:
    if: ${{ inputs.build_agent_golang }}
    strategy:
      fail-fast: true
      matrix:
        runtime: [docker, podman]
        version: [1.22.6, 1.17.13, 1.18.10, 1.20.14]
    runs-on: ${{ inputs.runs_on }}
    env:
      os: ubuntu
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: init variables
        id: step-variable
        run: |
          export "runtime=$([ ${{ matrix.runtime }} == podman ] && (echo -podman))"
          echo "runtime=${runtime}" >> $GITHUB_OUTPUT
          export "goVersion=$( echo -${{ matrix.version }})"
          echo "suffix=${goVersion}-${{ env.os }}${runtime}" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build jenkins agent with golang
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/go/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ inputs.platform }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-go:${{ inputs.container_tag }}${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-go:latest${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
          build-args: |
            REGISTRY_REPO=ghcr.io/${{ github.repository_owner }}
            RUNTIME=${{ steps.step-variable.outputs.runtime }}
            VERSION=${{ matrix.version }}
            DISTRIBUTION=${{ env.os }}
            DISTRIBUTION_SUFFIX=-${{ env.os }}
            ARCH_SUFFIX=-${{ inputs.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check golang agent tools
        run: |
          SOFTWARE_MATRIX=go-${{ matrix.version }}
          AGENT_IMAGE=ghcr.io/${{ github.repository_owner }}/jenkins-agent-go:${{ inputs.container_tag }}${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
          echo "Software Matrix Version: ${SOFTWARE_MATRIX}, Agent Image: ${AGENT_IMAGE}"
          docker run -v ./test/e2e/check_agent_software_tools.sh:/tmp/check_agent_software_tools.sh \
            -v ./test/fixture/image-check/go-agent:/tmp/go-agent/ \
            -e AGENT_IMAGE=$AGENT_IMAGE \
            -e SOFTWARE_MATRIX=${SOFTWARE_MATRIX} \
            -i $AGENT_IMAGE /bin/bash \
            -c "./tmp/check_agent_software_tools.sh"
  build-agent-maven:
    if: ${{ inputs.build_agent_maven }}
    strategy:
      fail-fast: true
      matrix:
        runtime: [docker, podman]
        version: ["8", "11", "17", "21"]
    runs-on: ${{ inputs.runs_on }}
    env:
      os: ubuntu
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: init variables
        id: step-variable
        run: |
          export "runtime=$([ ${{ matrix.runtime }} == podman ] && (echo -podman))"
          export "jdkVersion=$(echo -jdk${{ matrix.version }})"
          export "javaVersion=${{ matrix.version }}"
          echo "javaVersion=${javaVersion}" >> $GITHUB_OUTPUT
          echo "jdkVersion=${jdkVersion}" >> $GITHUB_OUTPUT
          echo "runtime=${runtime}" >> $GITHUB_OUTPUT
          echo "suffix=${jdkVersion}-${{ env.os }}${runtime}" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build jenkins agent with maven
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./jenkins-agent/maven/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: ${{ inputs.platform }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-maven:${{ inputs.container_tag }}${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
            ghcr.io/${{ github.repository_owner }}/jenkins-agent-maven:latest${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
          build-args: |
            REGISTRY_REPO=ghcr.io/${{ github.repository_owner }}
            RUNTIME=${{ steps.step-variable.outputs.runtime }}
            JAVA_VERSION=${{ steps.step-variable.outputs.javaVersion }}
            DISTRIBUTION=${{ env.os }}
            DISTRIBUTION_SUFFIX=-${{ env.os }}
            ARCH_SUFFIX=-${{ inputs.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: check maven agent tools
        run: |-
          SOFTWARE_MATRIX=java-${{ matrix.version }}
          AGENT_IMAGE=ghcr.io/${{ github.repository_owner }}/jenkins-agent-maven:${{ inputs.container_tag }}${{ steps.step-variable.outputs.suffix }}-${{ inputs.arch }}
          echo "Software Matrix Version: ${SOFTWARE_MATRIX}, Agent Image: ${AGENT_IMAGE}"
          docker run -v ./test/e2e/check_agent_software_tools.sh:/tmp/check_agent_software_tools.sh \
            -v ./test/fixture/image-check/maven-agent:/tmp/maven-agent/ \
            -e AGENT_IMAGE=$AGENT_IMAGE \
            -e SOFTWARE_MATRIX=${SOFTWARE_MATRIX} \
            -i $AGENT_IMAGE /bin/bash \
            -c "./tmp/check_agent_software_tools.sh"
